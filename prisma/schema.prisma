generator client {
  provider = "prisma-client-js"
  output = "./generated/client/mysql"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Department {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  deleted   Boolean   @default(false)
  parentId  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  deleteAt  DateTime?
  remark    String?   @db.VarChar(255)
  status    Boolean   @default(true)
  User      User[]
}

model Menu {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(50)
  path           String           @db.VarChar(255)
  redirect       String?          @db.VarChar(255)
  type           Int?
  component      String
  title          String?
  sort           Int?
  parentId       Int?
  status         Boolean          @default(true)
  deleted        Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  deleteAt       DateTime?
  Meta           Meta?
  PermissionList PermissionList[]
}

model Meta {
  id         Int       @id @default(autoincrement())
  affix      Boolean   @default(false)
  title      String?
  icon       String?
  activeMenu Boolean   @default(false)
  alwaysShow Boolean   @default(false)
  breadcrumb Boolean   @default(false)
  canTo      Boolean   @default(false)
  hidden     Boolean   @default(false)
  noCache    Boolean   @default(false)
  noTagsView Boolean   @default(false)
  deleted    Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  deleteAt   DateTime?
  menuId     Int       @unique
  permission Json
  Menu       Menu      @relation(fields: [menuId], references: [id], onDelete: Cascade)
}

model PermissionList {
  id        Int       @id @default(autoincrement())
  nodeid    String    @db.VarChar(50)
  label     String    @db.VarChar(50)
  value     String    @db.VarChar(50)
  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime
  deleteAt  DateTime?
  menuId    Int
  Menu      Menu      @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@index([menuId], map: "PermissionList_menuId_fkey")
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(50)
  remark    String?    @db.VarChar(255)
  status    Boolean    @default(true)
  deleted   Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime
  deleteAt  DateTime?
  menu      Json
  UserRole  UserRole[]
}

model User {
  id           Int         @id @default(autoincrement())
  username     String      @db.VarChar(50)
  password     String      @db.VarChar(255)
  avator       String?     @db.VarChar(255)
  phone        String      @unique
  status       Boolean     @default(true)
  deleted      Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  deleteAt     DateTime?
  departmentId Int?
  curRoleId    Int?
  Department   Department? @relation(fields: [departmentId], references: [id])
  UserRole     UserRole[]

  @@index([departmentId], map: "User_departmentId_fkey")
}

model UserRole {
  userId     Int
  roleId     Int
  assignedAt DateTime @default(now())
  assignedBy String?
  Role       Role     @relation(fields: [roleId], references: [id])
  User       User     @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
  @@index([roleId], map: "UserRole_roleId_fkey")
}


model Test666 {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  authorId  Int
}